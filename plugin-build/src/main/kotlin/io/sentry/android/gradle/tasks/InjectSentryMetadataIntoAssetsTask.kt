package io.sentry.android.gradle.tasks

import io.sentry.android.gradle.extensions.SentryPluginExtension
import io.sentry.android.gradle.telemetry.SentryTelemetryService
import io.sentry.android.gradle.telemetry.withSentryTelemetry
import io.sentry.android.gradle.util.PropertiesUtil
import java.io.File
import java.util.Properties
import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.file.ConfigurableFileCollection
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.RegularFile
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.InputDirectory
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.PathSensitive
import org.gradle.api.tasks.PathSensitivity
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.TaskProvider

abstract class InjectSentryMetadataIntoAssetsTask : DefaultTask() {

    @get:InputDirectory
    abstract val inputDir: DirectoryProperty

    @get:OutputDirectory
    abstract val outputDir: DirectoryProperty

    // we only care about file contents
    @get:PathSensitive(PathSensitivity.NONE)
    @get:InputFiles
    abstract val inputFiles: ConfigurableFileCollection

    @TaskAction
    fun taskAction() {
        val input = inputDir.get().asFile
        val output = outputDir.get().asFile

        // We must copy the contents of the input directory to the output directory before our transformation
        input.copyRecursively(output)
        if (input.parentFile.equals(output)) {
            logger.info(
                "Deleting assets input directory, as it's within the output folder: " +
                    "input: ${inputDir.get().asFile.absolutePath}, " +
                    "output: ${outputDir.get().asFile.absolutePath}"
            )
            input.deleteRecursively()
        }

        // merge props
        val props = Properties()
        props.setProperty("io.sentry.build-tool", "gradle")
        inputFiles.forEach { inputFile ->
            PropertiesUtil.loadMaybe(inputFile)?.let { props.putAll(it) }
        }

        // write props
        val propsFile = File(output, SENTRY_DEBUG_META_PROPERTIES_OUTPUT)
        propsFile.writer().use {
            props.store(
                it,
                "Generated by sentry-android-gradle-plugin"
            )
        }
    }

    companion object {
        internal const val SENTRY_DEBUG_META_PROPERTIES_OUTPUT = "sentry-debug-meta.properties"

        fun register(
            project: Project,
            extension: SentryPluginExtension,
            sentryTelemetryProvider: Provider<SentryTelemetryService>?,
            tasksGeneratingProperties: List<TaskProvider<out PropertiesFileOutputTask>>,
            taskSuffix: String = ""
        ): TaskProvider<InjectSentryMetadataIntoAssetsTask> {
            val inputFiles: List<Provider<RegularFile>> = tasksGeneratingProperties.mapNotNull {
                it.flatMap { task -> task.outputFile }
            }
            return project.tasks.register(
                "injectSentryDebugMetaProperties$taskSuffix",
                InjectSentryMetadataIntoAssetsTask::class.java
            ) { task ->
                task.inputFiles.setFrom(inputFiles)
                task.withSentryTelemetry(extension, sentryTelemetryProvider)
            }
        }
    }
}
