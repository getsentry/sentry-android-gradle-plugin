@file:Suppress("UnstableApiUsage")

package io.sentry.android.gradle.instrumentation.androidx.room

import com.android.build.api.instrumentation.ClassContext
import io.sentry.android.gradle.instrumentation.ClassInstrumentable
import io.sentry.android.gradle.instrumentation.CommonClassVisitor
import io.sentry.android.gradle.instrumentation.MethodContext
import io.sentry.android.gradle.instrumentation.MethodInstrumentable
import io.sentry.android.gradle.instrumentation.ReturnType
import io.sentry.android.gradle.instrumentation.SpanAddingClassVisitorFactory
import io.sentry.android.gradle.instrumentation.androidx.room.visitor.RoomCallMethodVisitor
import org.objectweb.asm.ClassVisitor
import org.objectweb.asm.MethodVisitor
import org.objectweb.asm.Opcodes

class AndroidXRoomDao : ClassInstrumentable {

    override val fqName: String get() = "androidx.room.Dao"

    override fun getVisitor(
        instrumentableContext: ClassContext,
        apiVersion: Int,
        originalVisitor: ClassVisitor,
        parameters: SpanAddingClassVisitorFactory.SpanAddingParameters
    ): ClassVisitor {
        val currentClassName = instrumentableContext.currentClassData.className
        val originalClassName = currentClassName.substringBefore(IMPL_SUFFIX)
        val originalClass = instrumentableContext.loadClassData(originalClassName)
            ?: error("Expected $originalClassName in the classpath, but failed to discover")
        return if (fqName in originalClass.classAnnotations) {
            CommonClassVisitor(
                apiVersion = apiVersion,
                classVisitor = originalVisitor,
                className = currentClassName.substringAfterLast('.'),
                methodInstrumentables = children,
                parameters = parameters
            )
        } else {
            originalVisitor
        }
    }

    override val children: List<MethodInstrumentable> = listOf(
        Call()
    )

    override fun isInstrumentable(data: ClassContext): Boolean =
        IMPL_SUFFIX in
            data.currentClassData.className &&
            CALLABLE_INTERFACE in
            data.currentClassData.interfaces

    companion object {
        private const val CALLABLE_INTERFACE = "java.util.concurrent.Callable"
        private const val IMPL_SUFFIX = "_Impl"
    }
}

class Call : MethodInstrumentable {
    override val fqName: String get() = "call"

    override fun getVisitor(
        instrumentableContext: MethodContext,
        apiVersion: Int,
        originalVisitor: MethodVisitor,
        parameters: SpanAddingClassVisitorFactory.SpanAddingParameters
    ): MethodVisitor = RoomCallMethodVisitor(
        ReturnType.fromDescriptor(instrumentableContext.descriptor),
        apiVersion,
        originalVisitor,
        instrumentableContext.access,
        instrumentableContext.descriptor
    )

    override fun isInstrumentable(data: MethodContext): Boolean {
        // there's a synthetic bridge method generated by java compiler with the same name which we don't want to instrument
        return super.isInstrumentable(data) && (data.access and Opcodes.ACC_BRIDGE) == 0
    }
}
