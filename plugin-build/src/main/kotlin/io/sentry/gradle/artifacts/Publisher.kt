/**
 * Adapted from https://github.com/autonomousapps/dependency-analysis-gradle-plugin/blob/1033bad8a8fe15c53c9095293eb97e79890ea63f/src/main/kotlin/com/autonomousapps/internal/artifacts/Publisher.kt
 *
 * Copyright 2024 Anthony Robalik
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sentry.gradle.artifacts

import org.gradle.api.Named
import org.gradle.api.NamedDomainObjectProvider
import org.gradle.api.Project
import org.gradle.api.artifacts.Configuration
import org.gradle.api.file.ConfigurableFileCollection
import org.gradle.api.file.Directory
import org.gradle.api.file.FileCollection
import org.gradle.api.file.RegularFile
import org.gradle.api.provider.Provider

/**
 * Used for publishing custom artifacts from a subproject to an aggregating project (often the "root" project). Only
 * for inter-project publishing (e.g., _not_ for publishing to Artifactory). See also [Resolver].
 *
 * Represents a set of tightly coupled [Configuration]s:
 * * A "dependency scope" configuration ([Resolver.declarable]).
 * * A "resolvable" configuration ([Resolver.internal]).
 * * A "consumable" configuration ([external]).
 *
 * Dependencies are _declared_ on [Resolver.declarable] in the aggregating project. Custom artifacts (e.g., not jars),
 * generated by tasks, are published via [publish], which should be used on dependency (artifact-producing) projects.
 *
 * Gradle uses [attributes][Attr] to wire the consumer project's [Resolver.internal] (resolvable) configuration to the
 * producer project's [external] (consumable) configuration, which is itself configured via [publish].
 *
 * @see <a href="https://docs.gradle.org/current/userguide/cross_project_publications.html#sec:variant-aware-sharing">Variant-aware sharing of artifacts between projects</a>
 * @see <a href="https://dev.to/autonomousapps/configuration-roles-and-the-blogging-industrial-complex-21mn">Gradle configuration roles</a>
 */
internal class Publisher<T : Named>(
  project: Project,
  attr: Attr<T>,
  val declarableName: String,
) {

  companion object {
    /** Convenience function for creating a [Publisher] for inter-project publishing of [DagpArtifacts]. */
    fun interProjectPublisher(
      project: Project,
      artifact: SgpArtifacts.Kind,
    ): Publisher<SgpArtifacts> {
      return if (project.extensions.extraProperties.has(artifact.artifactName)) {
        @Suppress("UNCHECKED_CAST")
        project.extensions.extraProperties[artifact.artifactName] as Publisher<SgpArtifacts>
      } else {
        Publisher(
          project = project,
          declarableName = artifact.declarableName,
          attr = Attr(SgpArtifacts.SGP_ARTIFACTS_ATTRIBUTE, artifact.artifactName)
        ).also {
          // memoize the value
          project.extensions.extraProperties[artifact.artifactName] = it
        }
      }
    }
  }

  // Following the naming pattern established by the Java Library plugin.
  // See https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph
  private val externalName = "${declarableName}Elements"

  /** The plugin will expose dependencies on this configuration, which extends from the declared dependencies. */
  private val external: NamedDomainObjectProvider<out Configuration> =
    project.consumableConfiguration(externalName) { configuration ->
      // This attribute is identical to what is set on the internal/resolvable configuration
      configuration.attributes { attrs ->
        attrs.attribute(
          attr.attribute,
          project.objects.named(attr.attribute.type, attr.attributeName)
        )
        attrs.attribute(
          SgpArtifacts.CATEGORY_ATTRIBUTE,
          SgpArtifacts.category(project.objects)
        )
      }
    }

  /** Teach Gradle which thing produces the artifact associated with the external/consumable configuration. */
  fun publish(output: Provider<RegularFile>) {
    external.configure {
      it.outgoing.artifact(output)
    }
  }

  @Suppress("UnstableApiUsage")
  fun publishMultiple(outputs: Provider<FileCollection>) {
    external.configure {
      it.outgoing.artifacts(outputs)
    }
  }
}